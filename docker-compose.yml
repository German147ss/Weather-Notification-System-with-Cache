version: "3.8"

services:

  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "${API_GATEWAY_PORT}:80"  # Mapea el puerto 80 del contenedor al puerto que elijas en .env
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Asegúrate de tener el archivo de configuración nginx.conf
    networks:
      - backend

  notification-service:
    build:
      context: ./notification-service
    container_name: notification-service
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      GOPROXY: ${GOPROXY}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      WEATHER_API_BASE_URL: ${WEATHER_API_BASE_URL}
    ports:
      - "${NOTIFICATION_SERVICE_PORT}"
    depends_on:
      - db
      - rabbitmqq3
    restart: always
    networks:
      - backend

  rabbitmqq3:
    image: rabbitmq:management
    container_name: rabbitmqq3
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    networks:
      - backend

  user-service:
    build:
      context: ./user-service
    container_name: user-service
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      GOPROXY: ${GOPROXY}
      WEATHER_API_BASE_URL: ${WEATHER_API_BASE_URL}
    ports:
      - "${USER_SERVICE_PORT}"
    depends_on:
      - db
      - rabbitmqq3
    restart: always
    networks:
      - backend

  db:
    image: postgres:12
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    restart: always
    ports:
      - "${DB_PORT_MAP}"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend 

  redis:
    image: redis:alpine
    container_name: redis-service
    ports:
      - "${REDIS_PORT_MAP}"
    networks:
      - backend

  weather-service:
    build:
      context: ./weather-service
    container_name: weather-new-service
    ports:
      - "${WEATHER_SERVICE_PORT}"
    environment:
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      APP_PORT: ${APP_PORT}
      CACHE_TYPE: ${CACHE_TYPE}
    depends_on:
      - redis
    networks:
      - backend
    dns:
      - 8.8.8.8

volumes:
  pgdata:

networks:
  backend:
    driver: bridge
